
.java파일 ---실행---> .class파일
            javac

p.464
        - 에러: 하드웨어 고장으로 인해 실행 오류가 발생
        - 예외: 잘못된 사용 또는 코딩으로 인한 오류
        - 종류
                1. 일반예외: 컴파일러가 예외 처리 코드 여부를 검사하는 예외
                        - 실행 전에 예외처리
                2. 실행예외: 컴파일러가 예외 처리 코드 여부를 검사하지 않는 예외
                        - 실행 후에 예외처리, 개발자 경험 토대로 예외처리를 예상(경험이 중요)

        - 예외 발생하면 예외 클래스부터 객체(자동) 생성한다.
                - 예외처리시 사용
                - Exception을 주로 쓰게됨
        - 표준 라이브러리
                라이브러리: 미리만들어진 클래스/함수 집합/모임
                - 예외클래스
                    - Exception(Throwable은 하드웨어 고장(에러)까지 잡아버림)  : 다중 catch했을 때 상위 클래스 뒤에 작성한다.
                    실행 예외 1. NullPointerException             : 변수의 참조값이 없을 때 예외 발생
                    실행 예외 2. ArrayIndexOutOfBoundsException   : 배열의 인덱스 범위를 벗어났을때
                    일반 예외 3. ClassNotFoundException           : 해당 클래스를 찾지 못했을 때 예외 발생
                    실행 예외 4. NumberFormatException            : 정수타입으로 형변환을 할 수 없을 때
                            - 상황에 따라 서로 다른 코드/행위 할려고.
        - 예외처리
                try{}           : 예외가 발생혹은 할 것 같은 코드
                catch(예외클래스 변수명){}       : 예외가 발생했을 때 코드
                finally{}       : 항상 실행되는 코드

                try{
                    외부적인 요소와 연동 :
                            1. FileInputStream() : 파일처리
                            2. DriverManager.getConnection() : DB연동
                            등등
                }catch(예외 클래스){

                }finally{
                    안전하게 연동된 요소와 끝마침/ 닫기
                    close()
                }