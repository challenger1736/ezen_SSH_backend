

★★★★★★★★★★★★★★★ 선언과 대입을 헷갈리지 말자 ★★★★★★★★★★★★★★★★
★               가끔 이렇게 기본적인 것을 놓쳐서 헷갈릴 때가 있다               ★
★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★


.이란 접근연산자이다.
Null + 기본 자료형은 .으로 메소드를 부를수 없음! 메소드가 없으니까.

등록 등록시마다 클래스의 new로 힙을 생성해줘야 하나의 new(하나의 인스턴스) , 하나의 new(하나의 인스턴스) 이런식으로 추가가 된다.
밖에 new가 한개 밖에없다면, 모두 다 같은 new 하나의 형식이 되므로 다같이 값들이 바뀌는 형태가 된다. - 싱글톤의 효과와 비슷한 느낌이라 생각하면 됨.

문자열은 불변이다. 자르고 재대입을 해줘야 그 문자열이 자른게 보인다.

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★ MVC 모델의 흐름 ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

View에서 받아서 Dto클래스의 하나의 값에 대입하고(컨트롤러의 생성자에), 그 해당 Dto하나를 컨트롤러에 넣어서 Dao 실행
그 Dao로 실행된 값으로 컨트롤러

순서
VdtoCdtoDao값C값V / VCDaoCV

★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★

근데 하나의 값에 하나를 넣으면 문제는 안생기나? 그것을 보자.

System.out.println(Arrays.toString(배열이름)); // 배열내 객체들의 주소확인.



생성자는 객체 생성을 하기에 생성자이다.
결국 new 클래스이름(); 은 생성자하나를 객체로 만드는 것이다.



toString메소드에 관해
//여러 프로그래밍 언어에서는 객체가 문자열로 변환될 때 자동으로 toString 메서드가 호출되기 때문에 toString을 생략해도 객체의 값들이 보인다.
//객체의 주소대신 나오게하는 toString 메소드를 넣어놓으면 주소대신 값이 나온다.

객체의 필드를 부를때 주로 필드는 private으로 한다.
그래서 게터세터로 부르는 형식이 많다. // 게터는 그 메소드의 리턴값을 받는 방식, 세터는 void로 그냥 값만 넣는 방식임이 머리속에 그려져야한다.